local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Arcade Haven by NV9L (v1.1)",
    LoadingTitle = "Loading NV9L...",
    LoadingSubtitle = "by @nv9l on discord",
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "nv9l hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "NV9L",
       Subtitle = "Key System",
       Note = "Authorized users only!",
       FileName = "nv9lkxkeyxbtz", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"ucl39b5Xr8mSE2Td8OS2CoFv97jLSK"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })


 local Tab = Window:CreateTab("Crash AutoFarm", 4483362458) -- Title, Image

 local amounttocrashvalue
 local waittimeamountcrash
 local togglecrashauto

 local Slider = Tab:CreateSlider({
    Name = "Bet Interval",
    Range = {100, 100000},
    Increment = 10,
    Suffix = "$",
    CurrentValue = 1000,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        amounttocrashvalue = Value
    end,
 })

 local TimeSlider = Tab:CreateSlider({
    Name = "Cashout Time",
    Range = {1, 15},
    Increment = 1,
    Suffix = "Seconds",
    CurrentValue = 2,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        waittimeamountcrash = Value
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Enable Crash AutoFarm",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        togglecrashauto = Value
        while togglecrashauto == true do
            wait(0.5)
            if game.ReplicatedStorage.Games.Crash:WaitForChild("Status").Value == "Intermission" then
                local args = {
                    [1] = tonumber(amounttocrashvalue)
                }
           
             game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("CrashService"):WaitForChild("RF"):WaitForChild("Join"):InvokeServer(unpack(args))
             repeat
                wait()
            until game.ReplicatedStorage.Games.Crash:WaitForChild("Status").Value == "Game"
            wait(tonumber(waittimeamountcrash))
            game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("_Index"):WaitForChild("sleitnick_knit@1.4.7"):WaitForChild("knit"):WaitForChild("Services"):WaitForChild("CrashService"):WaitForChild("RF"):WaitForChild("Cashout"):InvokeServer()
           end
         end        
    end,
 })
